### YamlMime:ManagedReference
items:
- uid: Yort.Laybuy.InStore.LaybuyCredentials
  commentId: T:Yort.Laybuy.InStore.LaybuyCredentials
  id: LaybuyCredentials
  parent: Yort.Laybuy.InStore
  children:
  - Yort.Laybuy.InStore.LaybuyCredentials.#ctor(System.String,System.String)
  - Yort.Laybuy.InStore.LaybuyCredentials.ApiKey
  - Yort.Laybuy.InStore.LaybuyCredentials.MerchantId
  langs:
  - csharp
  - vb
  name: LaybuyCredentials
  nameWithType: LaybuyCredentials
  fullName: Yort.Laybuy.InStore.LaybuyCredentials
  type: Class
  source:
    remote:
      path: src/LaybuyCredentials.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: LaybuyCredentials
    path: LaybuyCredentials.cs
    startLine: 9
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nProvides the credentials required to authentication to the Laybuy API.\n"
  example: []
  syntax:
    content: public class LaybuyCredentials
    content.vb: Public Class LaybuyCredentials
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Yort.Laybuy.InStore.LaybuyCredentials.#ctor(System.String,System.String)
  commentId: M:Yort.Laybuy.InStore.LaybuyCredentials.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Yort.Laybuy.InStore.LaybuyCredentials
  langs:
  - csharp
  - vb
  name: LaybuyCredentials(String, String)
  nameWithType: LaybuyCredentials.LaybuyCredentials(String, String)
  fullName: Yort.Laybuy.InStore.LaybuyCredentials.LaybuyCredentials(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/LaybuyCredentials.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: .ctor
    path: LaybuyCredentials.cs
    startLine: 16
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nInitializes a new instance of the <xref href=\"Yort.Laybuy.InStore.LaybuyCredentials\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public LaybuyCredentials(string merchantId, string apiKey)
    parameters:
    - id: merchantId
      type: System.String
      description: The merchant identifier.
    - id: apiKey
      type: System.String
      description: The API key.
    content.vb: Public Sub New(merchantId As String, apiKey As String)
  overload: Yort.Laybuy.InStore.LaybuyCredentials.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.LaybuyCredentials.MerchantId
  commentId: P:Yort.Laybuy.InStore.LaybuyCredentials.MerchantId
  id: MerchantId
  parent: Yort.Laybuy.InStore.LaybuyCredentials
  langs:
  - csharp
  - vb
  name: MerchantId
  nameWithType: LaybuyCredentials.MerchantId
  fullName: Yort.Laybuy.InStore.LaybuyCredentials.MerchantId
  type: Property
  source:
    remote:
      path: src/LaybuyCredentials.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: MerchantId
    path: LaybuyCredentials.cs
    startLine: 28
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nGets or sets the merchant identifier.\n"
  example: []
  syntax:
    content: public string MerchantId { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe merchant identifier.\n"
    content.vb: Public ReadOnly Property MerchantId As String
  overload: Yort.Laybuy.InStore.LaybuyCredentials.MerchantId*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Yort.Laybuy.InStore.LaybuyCredentials.ApiKey
  commentId: P:Yort.Laybuy.InStore.LaybuyCredentials.ApiKey
  id: ApiKey
  parent: Yort.Laybuy.InStore.LaybuyCredentials
  langs:
  - csharp
  - vb
  name: ApiKey
  nameWithType: LaybuyCredentials.ApiKey
  fullName: Yort.Laybuy.InStore.LaybuyCredentials.ApiKey
  type: Property
  source:
    remote:
      path: src/LaybuyCredentials.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: ApiKey
    path: LaybuyCredentials.cs
    startLine: 38
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nGets or sets the API key.\n"
  remarks: "\n<p>This is a &quot;secret&quot; value and should be stored securely, and protected from unauthorised access.</p>\n"
  example: []
  syntax:
    content: public string ApiKey { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe API key.\n"
    content.vb: Public ReadOnly Property ApiKey As String
  overload: Yort.Laybuy.InStore.LaybuyCredentials.ApiKey*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Yort.Laybuy.InStore
  commentId: N:Yort.Laybuy.InStore
  name: Yort.Laybuy.InStore
  nameWithType: Yort.Laybuy.InStore
  fullName: Yort.Laybuy.InStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Laybuy.InStore.LaybuyCredentials
  commentId: T:Yort.Laybuy.InStore.LaybuyCredentials
  parent: Yort.Laybuy.InStore
  name: LaybuyCredentials
  nameWithType: LaybuyCredentials
  fullName: Yort.Laybuy.InStore.LaybuyCredentials
- uid: Yort.Laybuy.InStore.LaybuyCredentials.#ctor*
  commentId: Overload:Yort.Laybuy.InStore.LaybuyCredentials.#ctor
  name: LaybuyCredentials
  nameWithType: LaybuyCredentials.LaybuyCredentials
  fullName: Yort.Laybuy.InStore.LaybuyCredentials.LaybuyCredentials
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Yort.Laybuy.InStore.LaybuyCredentials.MerchantId*
  commentId: Overload:Yort.Laybuy.InStore.LaybuyCredentials.MerchantId
  name: MerchantId
  nameWithType: LaybuyCredentials.MerchantId
  fullName: Yort.Laybuy.InStore.LaybuyCredentials.MerchantId
- uid: Yort.Laybuy.InStore.LaybuyCredentials.ApiKey*
  commentId: Overload:Yort.Laybuy.InStore.LaybuyCredentials.ApiKey
  name: ApiKey
  nameWithType: LaybuyCredentials.ApiKey
  fullName: Yort.Laybuy.InStore.LaybuyCredentials.ApiKey

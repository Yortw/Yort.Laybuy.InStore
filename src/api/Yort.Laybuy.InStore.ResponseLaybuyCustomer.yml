### YamlMime:ManagedReference
items:
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  commentId: T:Yort.Laybuy.InStore.ResponseLaybuyCustomer
  id: ResponseLaybuyCustomer
  parent: Yort.Laybuy.InStore
  children:
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.City
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.State
  - Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb
  langs:
  - csharp
  - vb
  name: ResponseLaybuyCustomer
  nameWithType: ResponseLaybuyCustomer
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  type: Class
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: ResponseLaybuyCustomer
    path: ResponseLaybuyCustomer.cs
    startLine: 12
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nA customer entity as returned by the Laybuy API.\n"
  example: []
  syntax:
    content: 'public class ResponseLaybuyCustomer : LaybuyCustomerBase'
    content.vb: >-
      Public Class ResponseLaybuyCustomer
          Inherits LaybuyCustomerBase
  seealso:
  - linkId: Yort.Laybuy.InStore.LaybuyCustomerBase
    commentId: T:Yort.Laybuy.InStore.LaybuyCustomerBase
  - linkId: Yort.Laybuy.InStore.ResponseLaybuyCustomer
    commentId: T:Yort.Laybuy.InStore.ResponseLaybuyCustomer
  inheritance:
  - System.Object
  - Yort.Laybuy.InStore.LaybuyCustomerBase
  inheritedMembers:
  - Yort.Laybuy.InStore.LaybuyCustomerBase.FirstName
  - Yort.Laybuy.InStore.LaybuyCustomerBase.LastName
  - Yort.Laybuy.InStore.LaybuyCustomerBase.Email
  - Yort.Laybuy.InStore.LaybuyCustomerBase.Phone
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId
  id: CustomerId
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: CustomerId
  nameWithType: ResponseLaybuyCustomer.CustomerId
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: CustomerId
    path: ResponseLaybuyCustomer.cs
    startLine: 20
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe unique id Laybuy knows this customer as.\n"
  remarks: "\n<p>This value is normally returned from Laybuy, and not provided as an input to it.</p>\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("customerId")]

      public long? CustomerId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int64}
    content.vb: >-
      <JsonProperty("customerId")>

      Public Property CustomerId As Long?
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: customerId
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1
  id: Address1
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: Address1
  nameWithType: ResponseLaybuyCustomer.Address1
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: Address1
    path: ResponseLaybuyCustomer.cs
    startLine: 27
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe first line of address for the customer.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("address1")]

      public string Address1 { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("address1")>

      Public Property Address1 As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: address1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2
  id: Address2
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: Address2
  nameWithType: ResponseLaybuyCustomer.Address2
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: Address2
    path: ResponseLaybuyCustomer.cs
    startLine: 32
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe second line of address for the customer, if any.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("address2")]

      public string Address2 { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("address2")>

      Public Property Address2 As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: address2
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb
  id: Suburb
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: Suburb
  nameWithType: ResponseLaybuyCustomer.Suburb
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: Suburb
    path: ResponseLaybuyCustomer.cs
    startLine: 37
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe suburb asssociated with the customer&apos;s address.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("suburb")]

      public string Suburb { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("suburb")>

      Public Property Suburb As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: suburb
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.City
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.City
  id: City
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: City
  nameWithType: ResponseLaybuyCustomer.City
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.City
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: City
    path: ResponseLaybuyCustomer.cs
    startLine: 42
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe city asssociated with the customer&apos;s address.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("city")]

      public string City { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("city")>

      Public Property City As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.City*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: city
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.State
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.State
  id: State
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: State
  nameWithType: ResponseLaybuyCustomer.State
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.State
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: State
    path: ResponseLaybuyCustomer.cs
    startLine: 47
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe state asssociated with the customer&apos;s address.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("state")]

      public string State { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("state")>

      Public Property State As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.State*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: state
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode
  id: Postcode
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: Postcode
  nameWithType: ResponseLaybuyCustomer.Postcode
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: Postcode
    path: ResponseLaybuyCustomer.cs
    startLine: 52
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe post code asssociated with the customer&apos;s address.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("postcode")]

      public string Postcode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("postcode")>

      Public Property Postcode As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: postcode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country
  commentId: P:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country
  id: Country
  parent: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  langs:
  - csharp
  - vb
  name: Country
  nameWithType: ResponseLaybuyCustomer.Country
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country
  type: Property
  source:
    remote:
      path: src/ResponseLaybuyCustomer.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Laybuy.InStore
    id: Country
    path: ResponseLaybuyCustomer.cs
    startLine: 57
  assemblies:
  - Yort.Laybuy.InStore
  namespace: Yort.Laybuy.InStore
  summary: "\nThe country asssociated with the customer&apos;s address.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty("country")]

      public string Country { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty("country")>

      Public Property Country As String
  overload: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: country
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Yort.Laybuy.InStore.LaybuyCustomerBase
  commentId: T:Yort.Laybuy.InStore.LaybuyCustomerBase
  parent: Yort.Laybuy.InStore
  name: LaybuyCustomerBase
  nameWithType: LaybuyCustomerBase
  fullName: Yort.Laybuy.InStore.LaybuyCustomerBase
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer
  commentId: T:Yort.Laybuy.InStore.ResponseLaybuyCustomer
  parent: Yort.Laybuy.InStore
  name: ResponseLaybuyCustomer
  nameWithType: ResponseLaybuyCustomer
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer
- uid: Yort.Laybuy.InStore
  commentId: N:Yort.Laybuy.InStore
  name: Yort.Laybuy.InStore
  nameWithType: Yort.Laybuy.InStore
  fullName: Yort.Laybuy.InStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Yort.Laybuy.InStore.LaybuyCustomerBase.FirstName
  commentId: P:Yort.Laybuy.InStore.LaybuyCustomerBase.FirstName
  parent: Yort.Laybuy.InStore.LaybuyCustomerBase
  name: FirstName
  nameWithType: LaybuyCustomerBase.FirstName
  fullName: Yort.Laybuy.InStore.LaybuyCustomerBase.FirstName
- uid: Yort.Laybuy.InStore.LaybuyCustomerBase.LastName
  commentId: P:Yort.Laybuy.InStore.LaybuyCustomerBase.LastName
  parent: Yort.Laybuy.InStore.LaybuyCustomerBase
  name: LastName
  nameWithType: LaybuyCustomerBase.LastName
  fullName: Yort.Laybuy.InStore.LaybuyCustomerBase.LastName
- uid: Yort.Laybuy.InStore.LaybuyCustomerBase.Email
  commentId: P:Yort.Laybuy.InStore.LaybuyCustomerBase.Email
  parent: Yort.Laybuy.InStore.LaybuyCustomerBase
  name: Email
  nameWithType: LaybuyCustomerBase.Email
  fullName: Yort.Laybuy.InStore.LaybuyCustomerBase.Email
- uid: Yort.Laybuy.InStore.LaybuyCustomerBase.Phone
  commentId: P:Yort.Laybuy.InStore.LaybuyCustomerBase.Phone
  parent: Yort.Laybuy.InStore.LaybuyCustomerBase
  name: Phone
  nameWithType: LaybuyCustomerBase.Phone
  fullName: Yort.Laybuy.InStore.LaybuyCustomerBase.Phone
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId
  name: CustomerId
  nameWithType: ResponseLaybuyCustomer.CustomerId
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.CustomerId
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1
  name: Address1
  nameWithType: ResponseLaybuyCustomer.Address1
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address1
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2
  name: Address2
  nameWithType: ResponseLaybuyCustomer.Address2
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Address2
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb
  name: Suburb
  nameWithType: ResponseLaybuyCustomer.Suburb
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Suburb
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.City*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.City
  name: City
  nameWithType: ResponseLaybuyCustomer.City
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.City
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.State*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.State
  name: State
  nameWithType: ResponseLaybuyCustomer.State
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.State
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode
  name: Postcode
  nameWithType: ResponseLaybuyCustomer.Postcode
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Postcode
- uid: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country*
  commentId: Overload:Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country
  name: Country
  nameWithType: ResponseLaybuyCustomer.Country
  fullName: Yort.Laybuy.InStore.ResponseLaybuyCustomer.Country

{
  "api/Yort.Laybuy.InStore.LaybuyApiException.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyApiException.html",
    "title": "Class LaybuyApiException | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyApiException Represents an exception thrown when a Laybuy API returns a non-successful result. Inheritance Object Exception LaybuyApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax [Serializable] public class LaybuyApiException : Exception, ISerializable Constructors | Improve this Doc View Source LaybuyApiException() Default constructor. Not recommended, used LaybuyApiException(String) . Declaration public LaybuyApiException() | Improve this Doc View Source LaybuyApiException(SerializationInfo, StreamingContext) Deserialisation constructor. Declaration protected LaybuyApiException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context | Improve this Doc View Source LaybuyApiException(String) Partial constructor. Declaration public LaybuyApiException(string message) Parameters Type Name Description String message The error message associated with the exception. | Improve this Doc View Source LaybuyApiException(String, Exception) Full constructor. Declaration public LaybuyApiException(string message, Exception inner) Parameters Type Name Description String message The error message associated with the exception. Exception inner Another exception wrapped by this one. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Yort.Laybuy.InStore.html": {
    "href": "api/Yort.Laybuy.InStore.html",
    "title": "Namespace Yort.Laybuy.InStore | Yort.Laybuy.InStore",
    "keywords": "Namespace Yort.Laybuy.InStore Classes CancelOrderRequest Provides details of a request to cancel a Laybuy previously created via Create(CreateOrderRequest) . CancelOrderResponse Provides details of the result of calling Cancel(CancelOrderRequest) . CreateOrderRequest Contains the values/arguments to the Create(CreateOrderRequest) call. CreateOrderResponse Represents the response from a Create(CreateOrderRequest) . LaybuyApiException Represents an exception thrown when a Laybuy API returns a non-successful result. LaybuyApiResponseBase Provides properties for values that (can) appear on all (any) API responses. LaybuyClient Provides access to the REST endpoints exposed by Laybuy API using an idiomatic .Net, object-oriented model. LaybuyClientConfiguration Provides configuration settings for ILaybuyClient and default values for some requests.. LaybuyCredentials Provides the credentials required to authentication to the Laybuy API. LaybuyCustomerAddress Represent a billing or shipping address for a RequestLaybuyCustomer . LaybuyCustomerBase Provides details about a customer to/from Laybuy. LaybuyItem Represents an item purchased via Laybuy. LaybuyOrderRefund Represents a refund previously made against an order. LaybuyRequestBase Base class for request objects, used to provide some internal plumbing. Not intended for use from application code. LaybuyStatus Provides various constant values used by/with Laybuy. OrderStatusRequest Represents arguments passed to GetStatus(OrderStatusRequest) . OrderStatusResponse Provides details about a Laybuy order, returned by GetStatus(OrderStatusRequest) . RefundRequest Represents the arguments passed to Refund(RefundRequest) . RefundResponse Represents the values returned by a call to Refund(RefundRequest) . RequestLaybuyCustomer A customer entity used on Laybuy API requests. ResponseLaybuyCustomer A customer entity as returned by the Laybuy API. StandardOriginData Represents origin data normally used with a CreateOrderRequest . Interfaces ILaybuyClient Interface for components that actually communicate with the Laybuy API. Provided to enable mocking/stubbing/faking in test scenarios. Enums LaybuyEnvironment Represents the possible environments for Laybuy."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Yort.Laybuy.InStore Documentation | Yort.Laybuy.InStore",
    "keywords": "Yort.Laybuy.InStore Documentation Quick Start Production Implementation Requirements Api Reference Official Laybuy API documenation"
  },
  "articles/productionrequirements.html": {
    "href": "articles/productionrequirements.html",
    "title": "Production Implementation Requirements | Yort.Laybuy.InStore",
    "keywords": "Production Implementation Requirements In order to provide a production quality integration with Laybuy the application developer must undertake a number of steps. Power Failure/Crash Recovery A reliable integration must handle situation where the POS process dies while a Laybuy order (or refund) is pending, due to a power/hardware failure, OS restart, bug etc. In this case the usual pattern is: On start-up, or another suitable event, check a persistent store for a list of outstanding requests. For each pending request, recover at least the MerchantReference , and optionally other data such as when the request was made. If a pending order is found, begin polling for the status of that order. If the order is still pending after the first check, either continue polling or cancel immediately. When a final state is reached the POS should relate this answer back to the pending POS transaction, provide some way for the user to apply it to a new transaction or perform an automatic refund depending on how the POS is designed. If a pending refund is found, retry the refund request using the same merchant reference if you want to ensure the refund occurred. If you want to check whether it occurred, perform a status poll for the order and check the list of refunds in the order status response. Before sending a Create or Refund request, generate a unique MerchantReference to be used on that request and save it to persistent storage so it can be used for crash recovery (see above) When a POS transaction is completed (or next persisted to permanent storage) with an order or refund that has reached a final status, remove that requests reference from the persistent store of pending requests so it will no longer be rechecked on a restart (see previous steps). Error Handling All methods in the LaybuyClient class might throw exceptions. Some exceptions such as System.ArgumentException and System.ArgumentNullException occur before the request is sent, if the request data doesn't meet the minimum known requirements for Laybuy. These should be handled probably presented to the user to tell them what is missing. In addition, any error normally throwing by the .Net HttpClient class, including System.TaskCanceledException or HttpRequestException could be re-thrown from these methods. TaskCanceled and timeout exceptions should may require special handling. For example if these exceptions are thrown during a Create call and the POS is not going to try again then another call should be made to Cancel to ensure the order is subsequently accepted by the user. HttpResponseExceptions may indicate a transient error, such as the network being briefly down, or a service unavailable/too many requests response from the server. In this case the POS should wait a short period and then retry the operation. Polling Timeout It's possible that due to a long network outage or similar problem that a create order request may never reach an approved or declined state and cannot be immediately cancelled. In this case the POS should have a timeout where it gives up polling. This timeout should not be too short, or should prompt the operator to ask if it should give up, as new customers can sometimes take several minutes to complete the sign up process. It is up to the POS to decide how to behave, but the usual logic is: Treat the request as declined Store the request somewhere to be rechecked at a later time when the network is available again. If the customer still wants to make payment they will have to choose another payment method (since the network is not available and Laybuy cannot be used) On recheck: If the payment is pending, cancel it. If the payment is approved, refund it. If the payment is cancelled or declined, there is nothing to do except remove it from the list of rechecks Manual Cancellation An operator may mis-key the customer's email address or payment amount (if split payments are allowed). It's also possible the cutomer's device may run out of batter, have no network connection to receive the payment request, or get dropped and damaged etc. In any of these cases where the payment cannot be processed for a known reason the POS user should have the option to manually cancel the request without waiting for a long timeout. This needs to use the Cancel method to notify Laybuy of the cancellation, and only treat the payment as cancelled if the cancellation request is successful. Cancelling Orders When making a Cancel order request an error response will be returned if the order has been accepted or declined already. This can happen even if you just polled for the status of the order and were told it is pending, due to race conditions between your poll and the user or payment back end providing a final response. Therefore, any cancellation request must have it's result checked and if an error is returned the order status should be polled again to ensure it is not now accepted/declined."
  },
  "api/Yort.Laybuy.InStore.LaybuyRequestBase.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyRequestBase.html",
    "title": "Class LaybuyRequestBase | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyRequestBase Base class for request objects, used to provide some internal plumbing. Not intended for use from application code. Inheritance Object LaybuyRequestBase CancelOrderRequest CreateOrderRequest OrderStatusRequest RefundRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public abstract class LaybuyRequestBase Methods | Improve this Doc View Source SetDefaults(LaybuyClientConfiguration) Sets any properties on this object that are null to the appropriate defaults, if possible. Declaration protected abstract void SetDefaults(LaybuyClientConfiguration settings) Parameters Type Name Description LaybuyClientConfiguration settings The settings used to construct the LaybuyClient instance that is about to send this request. | Improve this Doc View Source Validate() Validates the properties for this instance are valid before sending the request to the API. Declaration protected abstract void Validate() Remarks Provides simple client side validation, such as required fields beign provided and fields under maximum lengths etc."
  },
  "api/Yort.Laybuy.InStore.OrderStatusResponse.html": {
    "href": "api/Yort.Laybuy.InStore.OrderStatusResponse.html",
    "title": "Class OrderStatusResponse | Yort.Laybuy.InStore",
    "keywords": "Class OrderStatusResponse Provides details about a Laybuy order, returned by GetStatus(OrderStatusRequest) . Inheritance Object LaybuyApiResponseBase OrderStatusResponse Inherited Members LaybuyApiResponseBase.Result LaybuyApiResponseBase.Error Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class OrderStatusResponse : LaybuyApiResponseBase Properties | Improve this Doc View Source Amount The total value of the order. Declaration [JsonProperty(\"amount\")] public decimal Amount { get; set; } Property Value Type Description Decimal | Improve this Doc View Source Currency The currency associated with Amount . Declaration [JsonProperty(\"currency\")] public string Currency { get; set; } Property Value Type Description String | Improve this Doc View Source Customer A ResponseLaybuyCustomer instance containing details of the customer associated with the order. Declaration [JsonProperty(\"customer\")] public ResponseLaybuyCustomer Customer { get; set; } Property Value Type Description ResponseLaybuyCustomer | Improve this Doc View Source MerchantReference The unique client reference generated by the merchant to refer to this transaction and help ensure idempotency. Declaration [JsonProperty(\"merchantReference\")] public string MerchantReference { get; set; } Property Value Type Description String | Improve this Doc View Source OrderId The unique id of the order used by Laybuy. Declaration [JsonProperty(\"orderId\")] public long OrderId { get; set; } Property Value Type Description Int64 | Improve this Doc View Source Processed The date and time this order was processed, or null if it has not been confirmed. Declaration [JsonProperty(\"processed\")] public DateTime? Processed { get; set; } Property Value Type Description Nullable < DateTime > | Improve this Doc View Source Refunds Gets or sets any refunds previously made against this order. Declaration [JsonProperty(\"refunds\")] public IEnumerable<LaybuyOrderRefund> Refunds { get; set; } Property Value Type Description IEnumerable < LaybuyOrderRefund > The refunds. | Improve this Doc View Source Token The payment token associated with the order. Declaration [JsonProperty(\"token\")] public string Token { get; set; } Property Value Type Description String See Also OrderStatusRequest GetStatus ( OrderStatusRequest )"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Yort.Laybuy.InStore",
    "keywords": "Home Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Yort.Laybuy.InStore",
    "keywords": "Introduction This library is a thin/light weight OOP wrapper around the Laybuy API . It provides a clean OOP style interface and saves you having to do generate your own models, make HTTP calls, serialise/deserialise requests and responses and so on. It doesn't add any retry logic, persistent stores or reliability handling. It is still up to the application developer to provide a robust implementation . This library only implements the Laybuy in-store/POS API and does not implement e-commerce flows."
  },
  "api/quickstart.html": {
    "href": "api/quickstart.html",
    "title": "Yort.Laybuy.InStore Quick Start | Yort.Laybuy.InStore",
    "keywords": "Yort.Laybuy.InStore Quick Start Creating a Laybuy Order (Taking Payment) Basic Process Create an instance of LaybuyClient Call LaybuyClient.Create If the response from of step 2 has a success status, use LaybuyClient.GetStatus to poll at one second (or longer) intervals until an accepted, declined or cancelled status is reached. Prior to the order being accepted, declined or cancelled Laybuy will return a status with a result of Error and a message of Order not found . Handle any transient errors thrown from the polling request. If you decide to timeout/give up polling, call LaybuyClient.Cancel . Once a final status is reached, you can determine whether payment was approved or not by checking the outcome. You need to record the OrderId of the result somewhere if you want to be able to process refunds in the future. NB This is only a simple/demo implementation. A production quality implementation needs much more robust logic to handle power failure/crash/network outages and other problems. Add the Nuget package Install the Nuget package; PM> Install-Package Yort.Laybuy.InStore [ ] Full Code Sample A full (demo quality) code sample for creating payment, with minimum comments/noise. See the following sections for a breakdown of what's going on and why. var credentials = new LaybuyCredentials(\"YourMerchantId\", \"YourApiKey\"); var settings = new LaybuyClientConfiguration(credentials) { Environment = LaybuyEnvironment.Sandbox, DefaultBranch = \"Test Branch\" }; ILaybuyClient client = new LaybuyClient(settings); var createRequest = new CreateOrderRequest() { MerchantReference = System.Guid.NewGuid().ToString(), Amount = 10, Customer = new RequestLaybuyCustomer() { Phone = \"0210000000\" } }; var createResponse = await client.Create(createRequest); if (createResponse.Result != LaybuyStatus.Success) throw new InvalidOperationException(createResponse.Result); var done = false; var statusRequest = new OrderStatusRequest() { MerchantReference = createRequest.MerchantReference}; OrderStatusResponse status = null; while (!done) { await Task.Delay(1000); status = await client.GetStatus(statusRequest); if (status.Result == LaybuyStatus.Cancelled) throw new OperationCanceledException(); done = status.Result == LaybuyStatus.Success; } return status.OrderId; Configure and Create A LaybuyClient Instance The LaybuyClient is the main class in this library to use for accessing the Laybuy API functionality. To create an instance first you must create a LaybuyClientConfiguration object that tells the client how to behave. This sample configures a client for accessing the sandbox version of the API. You'll need a merchant id and api key issued by Laybuy for the sandbox environment for this to work. Normally you would create the Laybuy instance on start-up or first use, and then re-use it across requests instead of creating a new one each time. This allows HTTP connection pooling and improves performance. The LaybuyClient instance is thread-safe in so much as you can run multiple requests through the same instance for different payments from different threads. //Laybuy will issue a merchantid and api key for each environment, //you need to contact Laybuy to get these. var credentials = new LaybuyCredentials(\"YourMerchantId\", \"YourApiKey\"); var settings = new LaybuyClientConfiguration(credentials) { //The sandbox environment is used for test purposes, specify //the production environment to take real payments. Environment = LaybuyEnvironment.Sandbox, //Set this if you are running inside a single //POS process and always operating as the same branch, //otherwise leave this null set the branch property //on each request DefaultBranch = \"Test Branch\" }; //We use ILaybuyClient as the type for the variable holding //the LaybuyClient instance here as it makes it easier if we //want a test implementation later. ILaybuyClient client = new LaybuyClient(settings); Call Create Order Now we can create an order. Create a CreateOrderRequest with details of the payment to take, and pass it to the LaybuyClient.Create method. //We'll set the minimum required properties for this example var createRequest = new CreateOrderRequest() { //This is your unique reference for this payment, required //for status checks. Production quality //implementations needs to persist this somewhere and check //the status of incomplete payments on system restart etc. MerchantReference = System.Guid.NewGuid().ToString(), //The amount of the payment as a decimal value in the currency specified, //i.e 10 here represents $NZ10 Amount = 10, //Create a customer instance and set the mobile number for Laybuy to //send the payment SMS or push notification to. Customer = new RequestLaybuyCustomer() { Phone = \"0210000000\" } }; //Note, this method could throw exceptions. Production quality code //would handle them appropriately. var createResponse = await client.Create(createRequest); if (createResponse.Result != LaybuyStatus.Success) { //The payment request failed for some reason. //createResponse.Error contains a description of why. //Handle the failure here. throw new InvalidOperationException(createResponse.Result); } Poll for Status Now we need to wait for the customer to approve or decline the payment request via the Laybuy app or website. If they approve the payment then it will be sent by Laybuy to the payment processor, and if the payment processor accepts then we'll get a success response. If either the customer or the payment processor declines the response we'll get a cancel or error response. Unfortunately the Laybuy API doesn't return a status that clearly indicates the payment is pending. Prior to the customer accepting or declining the payment the response will be an 'Error' result with a message indicating the order was not found. This sample treats any error status as indicating the payment is still pending. var done = false; // Create a status request. You can create a new one on each loop or // reuse the same one, which is more efficient so that's what we do here. var statusRequest = new OrderStatusRequest() { MerchantReference = createRequest.MerchantReference }; OrderStatusResponse status = null; //Production quality code would also have a timeout, in case the user //is unable to approve or cancel the order in a timely fashion at //the till. There should also be an option for the operator to manually //cancel, in the case where the customer's mobile phone number or payment //amount has been incorrectly entered. while (!done) { await Task.Delay(1000); // Wait one second between poll requests //Request the current status status = await client.GetStatus(statusRequest); //Detect if we got a final status if (status.Result == LaybuyStatus.Cancelled) throw new OperationCanceledException(); done = status.Result == LaybuyStatus.Success; } //At this point status.Result should be \"Success\" and the payment plan //should be in place. You need to keep the Laybuy order id for future use //with refunds. return status.OrderId; Cancelling an Order To cancel a LaybuyOrder that is still pending approval (not accepted, declined or cancelled) you will need the payment token returned in the CreateOrderResponse . A response with a Result of Success indicates the order was cancelled. var cancelResponse = await client.Cancel ( new CancelOrderRequest() { Token = createResponse.Token } ); if (cancelResponse.Result != LaybuyStatus.Success) throw new InvalidOperationException(cancelResponse.Error); Refunding an Order Once an order has been approved you can make one or more refunds against it, up to the total value of the original order. For each refund create a CreateRefundRequest, specify the order id that was returned when the order was created, the refund amount and a unique reference for the refund request. If you get interrupted (power failure, crash, network outage) or suffer a transient error sending a refund, resend it with the same refund reference until you get a valid response. Using the same reference on the retries should ensure idempotency and prevent multiple refunds being created if the earlier attempts did actually succeed. var refundRequest = new RefundRequest() { Amount = 10, Note = \"Test refund\", OrderId = 123, RefundReference = System.Guid.NewGuid().ToString() }; var refundResponse = await client.Refund(refundRequest); if (refundResponse.Result != LaybuyStatus.Success) throw new InvalidOperationException(refundResponse.Error);"
  },
  "api/Yort.Laybuy.InStore.RequestLaybuyCustomer.html": {
    "href": "api/Yort.Laybuy.InStore.RequestLaybuyCustomer.html",
    "title": "Class RequestLaybuyCustomer | Yort.Laybuy.InStore",
    "keywords": "Class RequestLaybuyCustomer A customer entity used on Laybuy API requests. Inheritance Object LaybuyCustomerBase RequestLaybuyCustomer Inherited Members LaybuyCustomerBase.FirstName LaybuyCustomerBase.LastName LaybuyCustomerBase.Email LaybuyCustomerBase.Phone Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class RequestLaybuyCustomer : LaybuyCustomerBase Properties | Improve this Doc View Source BillingAddress Optional. Gets or sets the billing address. Declaration [JsonProperty(\"billingAddress\")] public LaybuyCustomerAddress BillingAddress { get; set; } Property Value Type Description LaybuyCustomerAddress The billing address. | Improve this Doc View Source ShippingAddress Optional. Gets or sets the shipping address. Declaration [JsonProperty(\"shippingAddress\")] public LaybuyCustomerAddress ShippingAddress { get; set; } Property Value Type Description LaybuyCustomerAddress The shipping address. See Also LaybuyCustomerBase CreateOrderRequest"
  },
  "api/Yort.Laybuy.InStore.CreateOrderRequest.html": {
    "href": "api/Yort.Laybuy.InStore.CreateOrderRequest.html",
    "title": "Class CreateOrderRequest | Yort.Laybuy.InStore",
    "keywords": "Class CreateOrderRequest Contains the values/arguments to the Create(CreateOrderRequest) call. Inheritance Object LaybuyRequestBase CreateOrderRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class CreateOrderRequest : LaybuyRequestBase Properties | Improve this Doc View Source Amount Required. The amount of money to request. Declaration [JsonProperty(\"amount\")] public decimal Amount { get; set; } Property Value Type Description Decimal Remarks The total for the customer to pay. This amount is validated against the sum of the amounts in the items attribute. See Also Currency | Improve this Doc View Source Currency Optional (but recommended). The currency the Amount is in. Declaration [JsonProperty(\"currency\")] public string Currency { get; set; } Property Value Type Description String Remarks If omitted then the default currency associated with the merchant id is used. It is highly recommended a specific currency be provided rather than relying on defaults. See Also Amount | Improve this Doc View Source Customer Required (must provide Phone ). Sets or returns a RequestLaybuyCustomer instance representing details of the customer for this request. Declaration [JsonProperty(\"customer\")] public RequestLaybuyCustomer Customer { get; set; } Property Value Type Description RequestLaybuyCustomer Remarks Requests made by systems for physical stores/branches *must* provide a value for the customer phone number. | Improve this Doc View Source Items Optional. Null or a collection of LaybuyItem objects being purchased. Default value is null. Declaration [JsonProperty(\"items\")] public IList<LaybuyItem> Items { get; } Property Value Type Description IList < LaybuyItem > | Improve this Doc View Source MerchantReference Required. A client generated reference for this request, used for idempotency. Declaration [JsonProperty(\"merchantReference\")] public string MerchantReference { get; set; } Property Value Type Description String | Improve this Doc View Source Origin Required. A string identifying the calling system. Must be pre-registered with Laybuy. Declaration [JsonProperty(\"origin\")] public string Origin { get; set; } Property Value Type Description String Remarks Uses a default of POS if not specified and no default is specified via the DefaultOrigin value. | Improve this Doc View Source OriginData Required. An object to be serialised as json containing data specific to the Origin value provided. Declaration [JsonProperty(\"originData\")] public object OriginData { get; set; } Property Value Type Description Object See Also StandardOriginData | Improve this Doc View Source Tax Optional. The tax included in Amount . Declaration [JsonProperty(\"tax\")] public decimal Tax { get; set; } Property Value Type Description Decimal Methods | Improve this Doc View Source SetDefaults(LaybuyClientConfiguration) Sets any properties on this object that are null to the appropriate defaults, if possible. Declaration protected override void SetDefaults(LaybuyClientConfiguration settings) Parameters Type Name Description LaybuyClientConfiguration settings The settings used to construct the LaybuyClient instance that is about to send this request. Overrides LaybuyRequestBase.SetDefaults(LaybuyClientConfiguration) | Improve this Doc View Source Validate() Validates the properties for this instance are valid before sending the request to the API. Declaration protected override void Validate() Overrides LaybuyRequestBase.Validate() Remarks Provides simple client side validation, such as required fields beign provided and fields under maximum lengths etc. See Also CreateOrderResponse Create ( CreateOrderRequest )"
  },
  "api/Yort.Laybuy.InStore.LaybuyEnvironment.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyEnvironment.html",
    "title": "Enum LaybuyEnvironment | Yort.Laybuy.InStore",
    "keywords": "Enum LaybuyEnvironment Represents the possible environments for Laybuy. Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public enum LaybuyEnvironment Fields Name Description Production Live/production environment. Sandbox Test environment."
  },
  "api/Yort.Laybuy.InStore.CreateOrderResponse.html": {
    "href": "api/Yort.Laybuy.InStore.CreateOrderResponse.html",
    "title": "Class CreateOrderResponse | Yort.Laybuy.InStore",
    "keywords": "Class CreateOrderResponse Represents the response from a Create(CreateOrderRequest) . Inheritance Object LaybuyApiResponseBase CreateOrderResponse Inherited Members LaybuyApiResponseBase.Result LaybuyApiResponseBase.Error Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class CreateOrderResponse : LaybuyApiResponseBase Properties | Improve this Doc View Source PaymentUrl The URL to use that begins the Laybuy payment process. Populated when the result is SUCCESS. Declaration [JsonProperty(\"paymentUrl\")] public string PaymentUrl { get; set; } Property Value Type Description String See Also LaybuyStatus | Improve this Doc View Source Token The Laybuy payment token for the payment. Populated when the result is SUCCESS. Declaration [JsonProperty(\"token\")] public string Token { get; set; } Property Value Type Description String See Also LaybuyStatus See Also CreateOrderRequest Create ( CreateOrderRequest )"
  },
  "api/Yort.Laybuy.InStore.ResponseLaybuyCustomer.html": {
    "href": "api/Yort.Laybuy.InStore.ResponseLaybuyCustomer.html",
    "title": "Class ResponseLaybuyCustomer | Yort.Laybuy.InStore",
    "keywords": "Class ResponseLaybuyCustomer A customer entity as returned by the Laybuy API. Inheritance Object LaybuyCustomerBase ResponseLaybuyCustomer Inherited Members LaybuyCustomerBase.FirstName LaybuyCustomerBase.LastName LaybuyCustomerBase.Email LaybuyCustomerBase.Phone Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class ResponseLaybuyCustomer : LaybuyCustomerBase Properties | Improve this Doc View Source Address1 The first line of address for the customer. Declaration [JsonProperty(\"address1\")] public string Address1 { get; set; } Property Value Type Description String | Improve this Doc View Source Address2 The second line of address for the customer, if any. Declaration [JsonProperty(\"address2\")] public string Address2 { get; set; } Property Value Type Description String | Improve this Doc View Source City The city asssociated with the customer's address. Declaration [JsonProperty(\"city\")] public string City { get; set; } Property Value Type Description String | Improve this Doc View Source Country The country asssociated with the customer's address. Declaration [JsonProperty(\"country\")] public string Country { get; set; } Property Value Type Description String | Improve this Doc View Source CustomerId The unique id Laybuy knows this customer as. Declaration [JsonProperty(\"customerId\")] public long? CustomerId { get; set; } Property Value Type Description Nullable < Int64 > Remarks This value is normally returned from Laybuy, and not provided as an input to it. | Improve this Doc View Source Postcode The post code asssociated with the customer's address. Declaration [JsonProperty(\"postcode\")] public string Postcode { get; set; } Property Value Type Description String | Improve this Doc View Source State The state asssociated with the customer's address. Declaration [JsonProperty(\"state\")] public string State { get; set; } Property Value Type Description String | Improve this Doc View Source Suburb The suburb asssociated with the customer's address. Declaration [JsonProperty(\"suburb\")] public string Suburb { get; set; } Property Value Type Description String See Also LaybuyCustomerBase ResponseLaybuyCustomer"
  },
  "api/Yort.Laybuy.InStore.CancelOrderResponse.html": {
    "href": "api/Yort.Laybuy.InStore.CancelOrderResponse.html",
    "title": "Class CancelOrderResponse | Yort.Laybuy.InStore",
    "keywords": "Class CancelOrderResponse Provides details of the result of calling Cancel(CancelOrderRequest) . Inheritance Object LaybuyApiResponseBase CancelOrderResponse Inherited Members LaybuyApiResponseBase.Result LaybuyApiResponseBase.Error Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class CancelOrderResponse : LaybuyApiResponseBase"
  },
  "api/Yort.Laybuy.InStore.LaybuyClient.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyClient.html",
    "title": "Class LaybuyClient | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyClient Provides access to the REST endpoints exposed by Laybuy API using an idiomatic .Net, object-oriented model. Inheritance Object LaybuyClient Implements ILaybuyClient IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public sealed class LaybuyClient : ILaybuyClient, IDisposable Remarks Instances of this class are thread-safe if that you can send requests through the same instance from multiple threads for different orders (MerchantReferences). Sending different requests for the same merchant reference simulatenously should be thread-safe in terms of this library code, but will be prone to potential race conditons on the API back end. Sending a cancel request for a client reference that is still being polled for on another thread is allowed, as the polling mechansim should repeat until the Laybuy API returns a cancelled status and no race condition should be present. Instances of this class should be kept and reused as this allows HTTP connection pooling and improves performance. Instances should only be disposed when you no longer intend to use the instance again, such as on process shutdown or if changing the configuration of the client. LaybuyClientConfiguration instances should not be modified after being passed into the construtor of an instance of this class. Constructors | Improve this Doc View Source LaybuyClient(LaybuyClientConfiguration) Full constructor. Declaration public LaybuyClient(LaybuyClientConfiguration settings) Parameters Type Name Description LaybuyClientConfiguration settings A LaybuyClientConfiguration instance containing configuration details. Methods | Improve this Doc View Source Cancel(CancelOrderRequest) Cancels a Laybuy previously created via the Create(CreateOrderRequest) method. Declaration public Task<CancelOrderResponse> Cancel(CancelOrderRequest request) Parameters Type Name Description CancelOrderRequest request A CancelOrderRequest instance containing details of the Laybuy to cancel. Returns Type Description Task < CancelOrderResponse > A CancelOrderResponse indicating success if the Laybuy was cancelled ok, otherwise error details. Remarks An error will be returned if the Laybuy is already confirmed. Exceptions Type Condition ArgumentNullException Thrown if Token is null. ArgumentException Thrown if Token is an empty string or only whitespace. TaskCanceledException May be thrown in the event of a timeout calling the Laybuy API. TimeoutException May be thrown in the event of a timeout calling the Laybuy API. HttpRequestException Thrown if the call to the Laybuy API returns an error response code. The Laybuy API does not use HTTP response codes for 'business level errors', such as 'order not found' or 'declined', so this type of exception typically represents a problem such as bad credentials, a bad gateway/DNS, server unavailable etc. See Also Create(CreateOrderRequest) | Improve this Doc View Source Create(CreateOrderRequest) Creates a new order at Laybuy. Declaration public Task<CreateOrderResponse> Create(CreateOrderRequest request) Parameters Type Name Description CreateOrderRequest request A CreateOrderRequest with details of the order to create. Returns Type Description Task < CreateOrderResponse > A CreateOrderResponse indicating the outcome of the request. Remarks If OriginData is null and CallbackUrlTemplate and/or DefaultBranch are non empty in the settings object used to construct this client then a new StandardOriginData instance is automatically created with appropriate values and applied to the request. If no default value can be applied then ArgumentNullException is thrown. See the Laybuy documenation at: https://integrations.laybuy.com/reference#post_order-create-1 Exceptions Type Condition ArgumentNullException Thrown if request, Origin , OriginData , Customer or MerchantReference is null. ArgumentException Thrown if request, Origin , OriginData , MerchantReference or Phone is an empty string or only whitespace. Also thrown if Amount is zero or negative. TaskCanceledException May be thrown in the event of a timeout calling the Laybuy API. TimeoutException May be thrown in the event of a timeout calling the Laybuy API. HttpRequestException Thrown if the call to the Laybuy API returns an error response code. The Laybuy API does not use HTTP response codes for 'business level errors', such as 'order not found' or 'declined', so this type of exception typically represents a problem such as bad credentials, a bad gateway/DNS, server unavailable etc. | Improve this Doc View Source Dispose() Disposes this instance and all internal resources. Declaration public void Dispose() | Improve this Doc View Source GetStatus(OrderStatusRequest) Gets the status of a Laybuy previously created via Create(CreateOrderRequest) . Declaration public Task<OrderStatusResponse> GetStatus(OrderStatusRequest request) Parameters Type Name Description OrderStatusRequest request A OrderStatusRequest with details of the Laybuy to retrieve the status of. Returns Type Description Task < OrderStatusResponse > A OrderStatusResponse indicating the outcome of the request. Exceptions Type Condition ArgumentException Thrown if MerchantReference and OrderId are both null, empty or whitespace. Also thrown if OrderId is zero or negative. TaskCanceledException May be thrown in the event of a timeout calling the Laybuy API. TimeoutException May be thrown in the event of a timeout calling the Laybuy API. HttpRequestException Thrown if the call to the Laybuy API returns an error response code. The Laybuy API does not use HTTP response codes for 'business level errors', such as 'order not found' or 'declined', so this type of exception typically represents a problem such as bad credentials, a bad gateway/DNS, server unavailable etc. | Improve this Doc View Source Refund(RefundRequest) Refunds an amount of money against a Laybuy previously created via Create(CreateOrderRequest) . Declaration public Task<RefundResponse> Refund(RefundRequest request) Parameters Type Name Description RefundRequest request A RefundRequest with details of the refund to make. Returns Type Description Task < RefundResponse > A RefundResponse indicating the outcome of the request. Remarks If you need to retry a refund due to a transient error or interruption (power failure/crash) ensure the same *RefundReference* is used on each retry attempt. This should ensure idempotency and prevent multiple refunds being issued by mistake. Exceptions Type Condition ArgumentNullException Thrown if RefundReference is null. ArgumentException Thrown if OrderId or Amount are zero or negative. Also thrown if RefundReference is empty or whitespace. TaskCanceledException May be thrown in the event of a timeout calling the Laybuy API. TimeoutException May be thrown in the event of a timeout calling the Laybuy API. HttpRequestException Thrown if the call to the Laybuy API returns an error response code. The Laybuy API does not use HTTP response codes for 'business level errors', such as 'order not found' or 'declined', so this type of exception typically represents a problem such as bad credentials, a bad gateway/DNS, server unavailable etc. Implements ILaybuyClient System.IDisposable"
  },
  "api/Yort.Laybuy.InStore.LaybuyItem.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyItem.html",
    "title": "Class LaybuyItem | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyItem Represents an item purchased via Laybuy. Inheritance Object LaybuyItem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class LaybuyItem Properties | Improve this Doc View Source Description The description of the product. Declaration [JsonProperty(\"description\")] public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Id The merchant's unique identifier (id, PLU/SKU, barcode, etc.) for the product. Declaration [JsonProperty(\"id\")] public string Id { get; set; } Property Value Type Description String | Improve this Doc View Source Price The unit price of the product, in the currency specified on the CreateOrderRequest . Declaration [JsonProperty(\"price\")] public decimal Price { get; set; } Property Value Type Description Decimal | Improve this Doc View Source Quantity The quantity of the item purchased. Declaration [JsonProperty(\"quantity\")] public int Quantity { get; set; } Property Value Type Description Int32 See Also Items"
  },
  "api/Yort.Laybuy.InStore.RefundRequest.html": {
    "href": "api/Yort.Laybuy.InStore.RefundRequest.html",
    "title": "Class RefundRequest | Yort.Laybuy.InStore",
    "keywords": "Class RefundRequest Represents the arguments passed to Refund(RefundRequest) . Inheritance Object LaybuyRequestBase RefundRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class RefundRequest : LaybuyRequestBase Properties | Improve this Doc View Source Amount The amount of the refund. Declaration [JsonProperty(\"amount\")] public decimal Amount { get; set; } Property Value Type Description Decimal | Improve this Doc View Source Note An optional, humand readable note sent to the recipient of the refund. Declaration [JsonProperty(\"note\")] public string Note { get; set; } Property Value Type Description String | Improve this Doc View Source OrderId The unique id of the Laybuy order to refund against. Declaration [JsonProperty(\"orderId\")] public long OrderId { get; set; } Property Value Type Description Int64 | Improve this Doc View Source RefundReference A unique client generated reference for the refund request, used to ensure idempotency. Declaration [JsonProperty(\"refundReference\")] public string RefundReference { get; set; } Property Value Type Description String Methods | Improve this Doc View Source SetDefaults(LaybuyClientConfiguration) Sets any properties on this object that are null to the appropriate defaults, if possible. Declaration protected override void SetDefaults(LaybuyClientConfiguration settings) Parameters Type Name Description LaybuyClientConfiguration settings The settings used to construct the LaybuyClient instance that is about to send this request. Overrides LaybuyRequestBase.SetDefaults(LaybuyClientConfiguration) | Improve this Doc View Source Validate() Validates the properties for this instance are valid before sending the request to the API. Declaration protected override void Validate() Overrides LaybuyRequestBase.Validate() Remarks Provides simple client side validation, such as required fields beign provided and fields under maximum lengths etc. Exceptions Type Condition NotImplementedException See Also RefundResponse Refund ( RefundRequest )"
  },
  "api/Yort.Laybuy.InStore.CancelOrderRequest.html": {
    "href": "api/Yort.Laybuy.InStore.CancelOrderRequest.html",
    "title": "Class CancelOrderRequest | Yort.Laybuy.InStore",
    "keywords": "Class CancelOrderRequest Provides details of a request to cancel a Laybuy previously created via Create(CreateOrderRequest) . Inheritance Object LaybuyRequestBase CancelOrderRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class CancelOrderRequest : LaybuyRequestBase Properties | Improve this Doc View Source Token Required. The token value returned by the Create(CreateOrderRequest) method, used to uniquely identify the Laybuy to cancel. Declaration public string Token { get; set; } Property Value Type Description String Methods | Improve this Doc View Source SetDefaults(LaybuyClientConfiguration) Sets any properties on this object that are null to the appropriate defaults, if possible. Declaration protected override void SetDefaults(LaybuyClientConfiguration settings) Parameters Type Name Description LaybuyClientConfiguration settings The settings used to construct the LaybuyClient instance that is about to send this request. Overrides LaybuyRequestBase.SetDefaults(LaybuyClientConfiguration) | Improve this Doc View Source Validate() Validates the properties for this instance are valid before sending the request to the API. Declaration protected override void Validate() Overrides LaybuyRequestBase.Validate() Remarks Provides simple client side validation, such as required fields beign provided and fields under maximum lengths etc."
  },
  "api/Yort.Laybuy.InStore.LaybuyClientConfiguration.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyClientConfiguration.html",
    "title": "Class LaybuyClientConfiguration | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyClientConfiguration Provides configuration settings for ILaybuyClient and default values for some requests.. Inheritance Object LaybuyClientConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class LaybuyClientConfiguration Constructors | Improve this Doc View Source LaybuyClientConfiguration(LaybuyCredentials) Default constructor. Declaration public LaybuyClientConfiguration(LaybuyCredentials credentials) Parameters Type Name Description LaybuyCredentials credentials Properties | Improve this Doc View Source CallbackUrlTemplate Gets or sets a string containing a template used to automatically generate callback urls for CreateOrderRequest . Declaration public string CallbackUrlTemplate { get; set; } Property Value Type Description String Remarks This value can be left null if you do not require callbacks. The default value is null. Callbacks are not typically used with the in store process (normally they used as part of an e-commerce workflow) but they are referred to in the Laybuy documenation for the POS API so they've been implemented in this library where mentions by that documentation. You can use the (case-sensitive) tag {merchantReference} in the template string, it will be replaced with the merchant reference of the request the url is generated for. Sample: https://www.mydomain.com/callbacks/laybuy/{merchantReference} | Improve this Doc View Source Credentials Gets or sets a LaybuyCredentials instance used to authenticate to the Laybuy API. Declaration public LaybuyCredentials Credentials { get; } Property Value Type Description LaybuyCredentials | Improve this Doc View Source DefaultBranch Gets or sets the default value for Branch which is applied if no origin data is specified on a CreateOrderRequest . Declaration public string DefaultBranch { get; set; } Property Value Type Description String The default branch identifier (usually name). | Improve this Doc View Source DefaultOrigin Gets or sets the default Origin value. Declaration public string DefaultOrigin { get; set; } Property Value Type Description String The default origin. Remarks The default value is \"POS\". | Improve this Doc View Source Environment Gets or sets a value from the LaybuyEnvironment enum specifying whether this client connects to the production or sandboxed (test) Laybuy API. Declaration public LaybuyEnvironment Environment { get; set; } Property Value Type Description LaybuyEnvironment Remarks The default value is Sandbox to prevent accidental live transactions. Production systems must specify Production for real payments to occur. | Improve this Doc View Source HttpClientFactory Gets or sets a function that create an HttpClient to be used to communicate with Laybuy. Can be null, in which case the system will create it's own instance. Declaration public Func<HttpClient> HttpClientFactory { get; set; } Property Value Type Description Func < HttpClient >"
  },
  "api/Yort.Laybuy.InStore.LaybuyOrderRefund.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyOrderRefund.html",
    "title": "Class LaybuyOrderRefund | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyOrderRefund Represents a refund previously made against an order. Inheritance Object LaybuyOrderRefund Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class LaybuyOrderRefund Properties | Improve this Doc View Source Amount Gets or sets the amount of the refund. Declaration [JsonProperty(\"amount\")] public decimal Amount { get; set; } Property Value Type Description Decimal The amount. | Improve this Doc View Source DateTime Gets or sets the date time at which the refund occurred. Declaration [JsonProperty(\"dateTime\")] public DateTime DateTime { get; set; } Property Value Type Description DateTime The date time. | Improve this Doc View Source RefundId Gets or sets the refund identifier. Declaration [JsonProperty(\"refundId\")] public int RefundId { get; set; } Property Value Type Description Int32 The refund identifier. | Improve this Doc View Source RefundReference Gets or sets the refund reference. Declaration [JsonProperty(\"refundReference\")] public string RefundReference { get; set; } Property Value Type Description String The refund reference. | Improve this Doc View Source User Gets or sets the user that made the refund. Declaration [JsonProperty(\"user\")] public string User { get; set; } Property Value Type Description String The user. | Improve this Doc View Source UserNote Gets or sets the user entered note of the refund. Declaration [JsonProperty(\"userNote\")] public string UserNote { get; set; } Property Value Type Description String The user note. See Also Refunds"
  },
  "api/Yort.Laybuy.InStore.LaybuyCustomerAddress.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyCustomerAddress.html",
    "title": "Class LaybuyCustomerAddress | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyCustomerAddress Represent a billing or shipping address for a RequestLaybuyCustomer . Inheritance Object LaybuyCustomerAddress Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class LaybuyCustomerAddress Properties | Improve this Doc View Source Address1 The first line of address for the customer. Declaration [JsonProperty(\"address1\")] public string Address1 { get; set; } Property Value Type Description String | Improve this Doc View Source Address2 The second line of address for the customer, if any. Declaration [JsonProperty(\"address2\")] public string Address2 { get; set; } Property Value Type Description String | Improve this Doc View Source City The city asssociated with the customer's address. Declaration [JsonProperty(\"city\")] public string City { get; set; } Property Value Type Description String | Improve this Doc View Source Country The country asssociated with the customer's address. Declaration [JsonProperty(\"country\")] public string Country { get; set; } Property Value Type Description String | Improve this Doc View Source Name The name of the person associated with the address, the person/department receiving the bill or the goods, depending on whether this is a billing or shipping address. If not specified, the customer's name will be used. Declaration [JsonProperty(\"name\")] public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Phone The phone number of the contact person or department for this address. Declaration [JsonProperty(\"phone\")] public string Phone { get; set; } Property Value Type Description String Remarks If not provided the customer's phone number is used. | Improve this Doc View Source Postcode The post code asssociated with the customer's address. Declaration [JsonProperty(\"postcode\")] public string Postcode { get; set; } Property Value Type Description String | Improve this Doc View Source State The state asssociated with the customer's address. Declaration [JsonProperty(\"state\")] public string State { get; set; } Property Value Type Description String | Improve this Doc View Source Suburb The suburb asssociated with the customer's address. Declaration [JsonProperty(\"suburb\")] public string Suburb { get; set; } Property Value Type Description String"
  },
  "api/Yort.Laybuy.InStore.LaybuyCredentials.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyCredentials.html",
    "title": "Class LaybuyCredentials | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyCredentials Provides the credentials required to authentication to the Laybuy API. Inheritance Object LaybuyCredentials Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class LaybuyCredentials Constructors | Improve this Doc View Source LaybuyCredentials(String, String) Initializes a new instance of the LaybuyCredentials class. Declaration public LaybuyCredentials(string merchantId, string apiKey) Parameters Type Name Description String merchantId The merchant identifier. String apiKey The API key. Properties | Improve this Doc View Source ApiKey Gets or sets the API key. Declaration public string ApiKey { get; } Property Value Type Description String The API key. Remarks This is a \"secret\" value and should be stored securely, and protected from unauthorised access. | Improve this Doc View Source MerchantId Gets or sets the merchant identifier. Declaration public string MerchantId { get; } Property Value Type Description String The merchant identifier."
  },
  "api/Yort.Laybuy.InStore.StandardOriginData.html": {
    "href": "api/Yort.Laybuy.InStore.StandardOriginData.html",
    "title": "Class StandardOriginData | Yort.Laybuy.InStore",
    "keywords": "Class StandardOriginData Represents origin data normally used with a CreateOrderRequest . Inheritance Object StandardOriginData Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class StandardOriginData Remarks Origin data required/expected can vary based on the Origin provided and the details of the specific implementation. This class provides the origin data used with *most* integrations. Properties | Improve this Doc View Source Branch Gets or sets the name or identifier of the branch the POS making the request belongs to. Declaration [JsonProperty(\"branch\")] public string Branch { get; set; } Property Value Type Description String The branch identifier (usually name). | Improve this Doc View Source CallbackUrl The absoulte URL to callback to when the payment process is complete. Declaration [JsonProperty(\"callbackUrl\")] public Uri CallbackUrl { get; set; } Property Value Type Description Uri"
  },
  "api/Yort.Laybuy.InStore.LaybuyCustomerBase.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyCustomerBase.html",
    "title": "Class LaybuyCustomerBase | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyCustomerBase Provides details about a customer to/from Laybuy. Inheritance Object LaybuyCustomerBase RequestLaybuyCustomer ResponseLaybuyCustomer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public abstract class LaybuyCustomerBase Remarks Unfortunately the Laybuy API isn't consistent in it's format of customer entities, with the shape of the entity varying when it's used on a request vs. a response. This class provided properties common to a Laybuy customer entity in either direction. See RequestLaybuyCustomer and ResponseLaybuyCustomer classes for the full entities. Properties | Improve this Doc View Source Email The email address of the customer. Declaration [JsonProperty(\"email\")] public string Email { get; set; } Property Value Type Description String | Improve this Doc View Source FirstName The first name of the customer. Declaration [JsonProperty(\"firstname\")] public string FirstName { get; set; } Property Value Type Description String | Improve this Doc View Source LastName The surname of the customer. Declaration [JsonProperty(\"lastname\")] public string LastName { get; set; } Property Value Type Description String | Improve this Doc View Source Phone Required. The mobile phone number of the customer. Declaration [JsonProperty(\"phone\")] public string Phone { get; set; } Property Value Type Description String Remarks The customer's mobile phone number must be provided for CreateOrderRequest requests so the can be sent the payment link via SMS. See Also RequestLaybuyCustomer ResponseLaybuyCustomer"
  },
  "api/Yort.Laybuy.InStore.LaybuyApiResponseBase.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyApiResponseBase.html",
    "title": "Class LaybuyApiResponseBase | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyApiResponseBase Provides properties for values that (can) appear on all (any) API responses. Inheritance Object LaybuyApiResponseBase CancelOrderResponse CreateOrderResponse OrderStatusResponse RefundResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public abstract class LaybuyApiResponseBase Properties | Improve this Doc View Source Error A human readable description of the error that occurred. Declaration [JsonProperty(\"error\")] public string Error { get; set; } Property Value Type Description String | Improve this Doc View Source Result The result of the API call, usually one of the LaybuyStatus for success or failure. Declaration [JsonProperty(\"result\")] public string Result { get; set; } Property Value Type Description String"
  },
  "api/Yort.Laybuy.InStore.ILaybuyClient.html": {
    "href": "api/Yort.Laybuy.InStore.ILaybuyClient.html",
    "title": "Interface ILaybuyClient | Yort.Laybuy.InStore",
    "keywords": "Interface ILaybuyClient Interface for components that actually communicate with the Laybuy API. Provided to enable mocking/stubbing/faking in test scenarios. Inherited Members IDisposable.Dispose() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public interface ILaybuyClient : IDisposable Remarks Application code should declare references to hold LaybuyClient instance as ILaybuyClient to help enable unit testing. Methods | Improve this Doc View Source Cancel(CancelOrderRequest) Cancels a Laybuy previously created via the Create(CreateOrderRequest) method. Declaration Task<CancelOrderResponse> Cancel(CancelOrderRequest request) Parameters Type Name Description CancelOrderRequest request A CancelOrderRequest instance containing details of the Laybuy to cancel. Returns Type Description Task < CancelOrderResponse > A CancelOrderResponse indicating success if the Laybuy was cancelled ok, otherwise error details. Remarks An error will be returned if the Laybuy is already confirmed. See Also Create(CreateOrderRequest) | Improve this Doc View Source Create(CreateOrderRequest) Creates a new Laybuy (order) at Laybuy. Declaration Task<CreateOrderResponse> Create(CreateOrderRequest request) Parameters Type Name Description CreateOrderRequest request A CreateOrderRequest with details of the Laybuy to create. Returns Type Description Task < CreateOrderResponse > A CreateOrderResponse indicating the outcome of the request. Exceptions Type Condition LaybuyApiException Thrown if Laybuy sends a valid response but the response itself indicates an error. See the exception's message property for details. See Also GetStatus(OrderStatusRequest) Cancel(CancelOrderRequest) Refund(RefundRequest) | Improve this Doc View Source GetStatus(OrderStatusRequest) Gets the status of a Laybuy previously created via Create(CreateOrderRequest) . Declaration Task<OrderStatusResponse> GetStatus(OrderStatusRequest request) Parameters Type Name Description OrderStatusRequest request A OrderStatusRequest with details of the Laybuy to retrieve the status of. Returns Type Description Task < OrderStatusResponse > A OrderStatusResponse indicating the outcome of the request. Exceptions Type Condition LaybuyApiException Thrown if Laybuy sends a valid response but the response itself indicates an error. See the exception's message property for details. | Improve this Doc View Source Refund(RefundRequest) Refunds an amount of money against a Laybuy previously created via Create(CreateOrderRequest) . Declaration Task<RefundResponse> Refund(RefundRequest request) Parameters Type Name Description RefundRequest request A RefundRequest with details of the refund to make. Returns Type Description Task < RefundResponse > A RefundResponse indicating the outcome of the request. Exceptions Type Condition LaybuyApiException Thrown if Laybuy sends a valid response but the response itself indicates an error. See the exception's message property for details."
  },
  "api/Yort.Laybuy.InStore.LaybuyStatus.html": {
    "href": "api/Yort.Laybuy.InStore.LaybuyStatus.html",
    "title": "Class LaybuyStatus | Yort.Laybuy.InStore",
    "keywords": "Class LaybuyStatus Provides various constant values used by/with Laybuy. Inheritance Object LaybuyStatus Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public static class LaybuyStatus Fields | Improve this Doc View Source Cancelled Indicates a transaction has been cancelled. Declaration public const string Cancelled = \"CANCELLED\" Field Value Type Description String | Improve this Doc View Source Error Indicates an unsuccessful call to the Laybuy API (see Result ). Declaration public const string Error = \"ERROR\" Field Value Type Description String | Improve this Doc View Source Success Indicates a successful call to the Laybuy API (see Result ). Declaration public const string Success = \"SUCCESS\" Field Value Type Description String"
  },
  "api/Yort.Laybuy.InStore.RefundResponse.html": {
    "href": "api/Yort.Laybuy.InStore.RefundResponse.html",
    "title": "Class RefundResponse | Yort.Laybuy.InStore",
    "keywords": "Class RefundResponse Represents the values returned by a call to Refund(RefundRequest) . Inheritance Object LaybuyApiResponseBase RefundResponse Inherited Members LaybuyApiResponseBase.Result LaybuyApiResponseBase.Error Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class RefundResponse : LaybuyApiResponseBase Properties | Improve this Doc View Source MerchantReference The merchant reference of the Laybuy order that was refunded against. Declaration [JsonProperty(\"merchantReference\")] public string MerchantReference { get; set; } Property Value Type Description String | Improve this Doc View Source RefundId The unique id of the refund transaction created. Declaration [JsonProperty(\"refundId\")] public long RefundId { get; set; } Property Value Type Description Int64"
  },
  "api/Yort.Laybuy.InStore.OrderStatusRequest.html": {
    "href": "api/Yort.Laybuy.InStore.OrderStatusRequest.html",
    "title": "Class OrderStatusRequest | Yort.Laybuy.InStore",
    "keywords": "Class OrderStatusRequest Represents arguments passed to GetStatus(OrderStatusRequest) . Inheritance Object LaybuyRequestBase OrderStatusRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Laybuy.InStore Assembly : Yort.Laybuy.InStore.dll Syntax public class OrderStatusRequest : LaybuyRequestBase Properties | Improve this Doc View Source MerchantReference The unique merchant reference of the Laybuy order to retrieve. Can be null if OrderId is provided. Declaration [JsonProperty(\"merchantReference\")] public string MerchantReference { get; set; } Property Value Type Description String | Improve this Doc View Source OrderId The unique Laybuy id of the Laybuy order to retrieve. Can be null if MerchantReference is provided. Declaration [JsonProperty(\"orderId\")] public long? OrderId { get; set; } Property Value Type Description Nullable < Int64 > Methods | Improve this Doc View Source SetDefaults(LaybuyClientConfiguration) Sets any properties on this object that are null to the appropriate defaults, if possible. Declaration protected override void SetDefaults(LaybuyClientConfiguration settings) Parameters Type Name Description LaybuyClientConfiguration settings The settings used to construct the LaybuyClient instance that is about to send this request. Overrides LaybuyRequestBase.SetDefaults(LaybuyClientConfiguration) | Improve this Doc View Source Validate() Validates the properties for this instance are valid before sending the request to the API. Declaration protected override void Validate() Overrides LaybuyRequestBase.Validate() Remarks Provides simple client side validation, such as required fields beign provided and fields under maximum lengths etc. Exceptions Type Condition ArgumentException See Also OrderStatusResponse GetStatus ( OrderStatusRequest )"
  }
}